#coding=utf-8
from keras.layers import Input,Dense,Embedding,Conv2D,MaxPool2D
from keras.layers import Reshape,Flatten,Dropout,Concatenate
from keras.callbacks import ModelCheckpoint
from keras.optimizers import Adam
from keras.models import Model
from sklearn.model_selection import train_test_split
from data_helper import load_data

print('正在加载数据。。。')

x,y,vocabulary,vocabulary_inv=load_data()
print(x.shape)
print(y.shape)
x_train,x_test,y_train,y_test=train_test_split(x,y,train_size=0.8,random_state=2)
print(x_train.shape)
print(y_train.shape)

sequence_length=x_train.shape[1]
vocabulary_size=len(vocabulary_inv)
print('voc_size:',vocabulary_size)
embedding_dim=256
filter_size=[3,4,5]
num_filter=512
drop=0.5

epochs=1
batch_size=300

print('正在创建模型。。。')

inputs=Input(shape=(sequence_length,),dtype='int32')
embedding=Embedding(input_dim=vocabulary_size,output_dim=embedding_dim,input_length=sequence_length)(inputs)
reshape=Reshape((sequence_length,embedding_dim,1))(embedding)

conv_0=Conv2D(num_filter,kernel_size=(filter_size[0],embedding_dim),padding='valid',kernel_initializer='normal',activation='relu')(reshape)
conv_1=Conv2D(num_filter,kernel_size=(filter_size[1],embedding_dim),padding='valid',kernel_initializer='normal',activation='relu')(reshape)
conv_2=Conv2D(num_filter,kernel_size=(filter_size[2],embedding_dim),padding='valid',kernel_initializer='normal',activation='relu')(reshape)

maxpool_0=MaxPool2D(pool_size=(sequence_length-filter_size[0]+1,1),strides=(1,1),padding='valid')(conv_0)
maxpool_1=MaxPool2D(pool_size=(sequence_length-filter_size[1]+1,1),strides=(1,1),padding='valid')(conv_1)
maxpool_2=MaxPool2D(pool_size=(sequence_length-filter_size[2]+1,1),strides=(1,1),padding='valid')(conv_2)

concatenated_tensor=Concatenate(axis=1)([maxpool_0,maxpool_1,maxpool_2])

flatten=Flatten()(concatenated_tensor)
dropout=Dropout(drop)(flatten)
output=Dense(units=2,activation='softmax')(dropout)
model=Model(inputs=inputs,outputs=output)

checkpoint=ModelCheckpoint('result_cnn_txt/chinese.weights.{epoch:03d}-{val_acc:.4f}.hdf5',
                           monitor='val_acc',verbose=1,save_best_only=True,mode='auto')
adam=Adam(lr=1e-4,beta_1=0.9,beta_2=0.999,epsilon=1e-08,decay=0.0)
model.compile(optimizer=adam,loss='binary_crossentropy',metrics=['accuracy'])
print('Training Model...')
model.fit(x_train,y_train,batch_size=batch_size,epochs=epochs,verbose=1,callbacks=[checkpoint]
          ,validation_data=(x_test,y_test))
